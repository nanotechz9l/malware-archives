require 'archive_file'
require 'support/string_extend'
require '/Library/Ruby/Gems/1.8/gems/rainbow-1.1.4/lib/rainbow.rb'

  class Flow
  
  class Input_Validation
    @@actions = ['list', 'search', 'add', 'help', 'quit']
    def self.actions; @@actions; end
  end
  
  def initialize(path=nil)
    
    # locate the malware archive text file at path
    MalwareArchive.filepath = path
    if MalwareArchive.file_usable?
       puts "Loaded existing Malware Archive".foreground(:yellow)
   
    # or create a new file
    elsif MalwareArchive.create_file
      puts "Created new Malware Archive".foreground(:yellow)
   
    # exit if create fails   
    else
      puts "Exiting!!!\n\n".foreground(:yellow).underline.bright
      exit!
    end
  end

  def launch!
    introduction 
    # action loop
    result = nil
    until result == :quit # if result is == quit break out of the loop
       action, args = input_validation  # verify input is valid as stated in the Input_Validation class above
       result = do_action(action, args) # valid input verified before returning result
     end
     conclusion
end

def input_validation # inside a loop to check for valid action before returning it
  action = nil
  # Keep asking for user input until we get a valid action
  until Flow::Input_Validation.actions.include?(action)
    puts "Commands available are: " + Flow::Input_Validation.actions.join(", ") if action
       print "> "
       user_response = gets.chomp
       args = user_response.downcase.strip.split(' ') #downcase and strip whitespace from input
       action = args.shift     
     end
       return action, args
end

def do_action(action, args=[])
  case action
  when 'list'
    list
  when 'search'
    keyword = args.shift  
    search(keyword)
  when 'add'
    add
  when 'help'
    puts "Printing help banner".foreground(:yellow)
  when 'quit'
    return :quit # quit gets caught by result above and breaks us out of the loop
  else
    puts "\nCommand not available. Available commands are list, find, add, help, quit or control+c for a hard quit".foreground(:yellow)
  end
end

def list
  output_action_header("listing malware archives")
  archive_list = MalwareArchive.saved_malware_archives
  output_malware_table(archive_list)
=begin  archive_list.each do |bugs|
    puts "Filename: ".foreground(:green).ljust(5) + bugs.filename + " | " + "Filetype: ".foreground(:green).ljust(5) + bugs.filetype + " | " + "Filesize: ".foreground(:green) + bugs.filesize + " | " + "MD5: ".foreground(:green) + bugs.md5 + " | " + "SHA1: ".foreground(:green) + bugs.sha1 + " | " + "SHA256: ".foreground(:green) + bugs.sha256 + " | " + "SHA512: ".foreground(:green) + bugs.sha512 + " | " + "CRC32: ".foreground(:green) + bugs.crc32 + " | " + "SSDEEP: ".foreground(:green) + bugs.ssdeep
=end  end
end

def search(keyword="")
  output_action_header("Find a specific malware sample")
  if keyword
    archive_list = MalwareArchive.saved_malware_archives
    found = archive_list.select do |hug|
      hug.filename.downcase.include?(keyword.downcase) ||
      hug.filetype.downcase.include?(keyword.downcase) ||
      hug.filesize.downcase.include?(keyword.downcase) ||
      hug.md5.downcase.include?(keyword.downcase) ||
      hug.sha1.downcase.include?(keyword.downcase) ||
      hug.sha256.downcase.include?(keyword.downcase) ||
      hug.sha512.downcase.include?(keyword.downcase) ||
      hug.crc32.downcase.include?(keyword.downcase) ||
      hug.ssdeep.downcase.include?(keyword.downcase)
    end
    output_malware_table(found )
  else
    puts "Find a Malware Sample by searching for its filename, filetype, filesize, md5, sha1, sha256, sha512, crc32, and ssdeep values!"
    puts "Filename Example/s: search trojan, search B21F.exe"
    puts "Filetype Example/s: search PE32 executable for MS Windows (GUI) Intel 80386 32-bit" 
    puts "Filesize Example/s: search 175224 bytes"
    puts "MD5 Example/s: search bdfa4e9b11a807d78c9d00dfa36d4140"
    puts "SHA1 Example/s: search cc3391e95229b8cbe71ca1bd9444694d644540a3"
    puts "SHA256 Example/s: search 4c5679724dc994cdc795076ce0be3b58fe2a326d751013fc8275562208ccc8c7"
    puts "SHA512 Eample/s: search c4af442fe3a0993761ebbcab5709ea553267607c8749c87e20e577e5569f224e71bf2e537b85f99b60d631a0cea416ab2cb97622dd33ac7d087a4484c80f4a8b"
    puts "CRC32 Example/s: search DB4DBEE2"
    puts "SSDEEP Example/s: search 3072:vxGqKrtglLcGX03almBCpy533wB0ytv6i2O2lwo8iU5XQbtDvo:vxvaGXr8MM5ni0yB6blfMQJo" 
  
  end
end

def add
  output_action_header("Add a new Malware Sample ")

  malware = MalwareArchive.build_using_questions  
  if malware.save
    puts "\nNew Malware sample added to 'samples.txt' flat file. Database support coming soon!".foreground(:yellow).bright
  else
    puts "\nSave Error: Malware Sample unable to be saved to database".foreground(:red).underline.bright
  end
end

  def introduction
  puts "\n\nWelcome to the Malware Museum!".foreground(:yellow).underline.bright + " by Rick Flores"
  puts "This is an interactive application that helps you find/add malware samples in/to our database.".foreground(:yellow).bright
  puts "Commands available are: list, search, add, help, quit.\n\n"
  end

  def conclusion
  puts "\n<<< Goodbye and happy bug hunting! >>> \n\n\n".foreground(:yellow).bright
  end
  
  private
  
  def output_action_header(text)
    puts "\n#{text.upcase.center(145)}\n\n."
  end
  
  def output_malware_table(archive_list =[])
    print " " + "Name".ljust(15).foreground(:green)
    print " " + "Type".ljust(15).foreground(:green)
    print " " + "Size".ljust(15).foreground(:green)
    print " " + "MD5".ljust(15).foreground(:green)
    print " " + "SHA1".ljust(15).foreground(:green)
    print " " + "SHA256".ljust(15).foreground(:green)
    print " " + "SHA512".ljust(15).foreground(:green)
    print " " + "CRC32".ljust(15).foreground(:green)
    print " " + "SSDEEP".ljust(15).foreground(:green)
    puts "_" * 200
    archive_list.each do |bugs|
      line = " " << bugs.filename.ljust(15).titleize
      line << " " + bugs.filetype.ljust(15).titleize
      line << " " + bugs.filesize.ljust(15).titleize
      line << " " + bugs.md5.ljust(15).titleize
      line << " " + bugs.sha1.ljust(15).titleize
      line << " " + bugs.sha256.ljust(15).titleize
      line << " " + bugs.sha512.ljust(15).titleize
      line << " " + bugs.crc32.ljust(15).titleize
      line << " " + bugs.ssdeep.ljust(15).titleize
      puts line
    end
    puts "No listings found" if archive_list.empty?
    puts "_" * 200
    
  end  
end