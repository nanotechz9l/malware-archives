# This module illustrates how additional functionality can be 
# included (or "mixed-in") to a class and then reused
# It borrows heavily from the Ruby on Rails' number_to_currency method
module NumberHelper
  
  def number_to_currency(number, options={})
    unit         = options[:unit]      || '$'
    precision    = options[:precision] || 2
    delimeter    = options[:delimeter] || ','
    separator    = options[:seperator] || '.'
    
    separator = '' if precision == 0
    interger, decimal = number.to_s.split('.') 
    
    i - interger.length
    until i <= 3
      interger = interger.insert(i,delimeter)
  end
  
   if precision == 0
    precise_decimal = ''
    else
    # make sure decimal is not nil
      decimal ||= "0"
    # make sure the decimal is not to large
      decimal = decimal[0, precision-1]
    # make sure the decimal is not to short
      precise_decimal = deciaml.ljust(precision, "0") 
  end

    return unit + interger + seperator + precise_decimal
  end
end